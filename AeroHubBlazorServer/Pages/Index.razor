@page "/"
@using FileHandlingServer.Data
@inject AzureStorageHelper AzureStorageHelper
@inject IConfiguration Configuration

<h3>Upload File to Azure</h3>
@if (FileUrl != "")
{
    <img src="@FileUrl" />
    <br />
    <br />
}

<div class="dropArea @dropClass">
    Drag and drop file, or click to select a local file.
    <InputFile disabled="@Uploading"
               OnChange="OnInputFileChange"
               @ondragenter="HandleDragEnter"
               @ondragleave="HandleDragLeave" />
</div>

<br />

<h3>Blob Files</h3>

<ul>
    @foreach (var url in BlobFileUrls)
    {
        <li><a href="@url">@url</a><br /></li>
    }
</ul>

@code
{
    string FileUrl = "";
    bool Uploading = false;
    long UploadedBytes;
    long TotalBytes;
    List<string> BlobFileUrls = new List<string>();
    string ContainerName = "pythonin"; // This could optionally be in the config file

    // support for drag/drop
    string dropClass = string.Empty;
    void HandleDragEnter()
    {
        dropClass = "dropAreaDrug";
    }
    void HandleDragLeave()
    {
        dropClass = string.Empty;
    }

    /// <summary>
    /// Occurs when a large file is selected or dropped
    /// </summary>
    /// <param name="args"></param>
    /// <returns></returns>
    
    async Task OnInputFileChange(InputFileChangeEventArgs args)
    {
        dropClass = string.Empty;

        try
        {
            // disable the upload pane
            Uploading = true;
            await InvokeAsync(StateHasChanged);

            // Resize to no more than 400x400
            var format = "image/png";
            var resizedImageFile = await args.File.RequestImageFileAsync(format, 400, 400);

            // read resized png data into a buffer
            var buffer = new byte[resizedImageFile.Size];
            await resizedImageFile.OpenReadStream().ReadAsync(buffer);

            // get new filename with a bit of entropy
            string justFileName = Path.GetFileNameWithoutExtension(args.File.Name);
            string newFileNameWithoutPath = $"{justFileName}-{DateTime.Now.Ticks.ToString()}";
            string filename = $"{Environment.CurrentDirectory}\\files\\{newFileNameWithoutPath}";

            // write the file
            File.WriteAllBytes(filename, buffer);

            // upload to Azure Storage
            string baseUrl = Configuration["StorageBaseUrl"];
            string bloburl = $"{baseUrl}{ContainerName}/";

            // Copy to Azure
            FileUrl = await AzureStorageHelper.UploadFile(ContainerName, filename, newFileNameWithoutPath, false);
            if (FileUrl != "")
            {
                // delete local file
                File.Delete(filename);
                await ListFiles();
            }

            Uploading = false;

        }
        catch (Exception ex)
        {
            Uploading = false;
            await InvokeAsync(StateHasChanged);
            System.Diagnostics.Debug.WriteLine(ex.Message);
            throw;
        }
    }

    async Task ListFiles()
    {
        BlobFileUrls = await AzureStorageHelper.GetFileList(ContainerName);
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnInitializedAsync()
    {
        await ListFiles();
    }
}