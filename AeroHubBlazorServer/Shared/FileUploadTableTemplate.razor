@using System.Diagnostics.CodeAnalysis
@using AeroHubBlazorServer.Data
@using AeroHubBlazorServer.Interfaces
@using AeroHubBlazorServer.Pages
@using Azure.Storage.Blobs
@inject ILogger<CreateMetaFile> Logger
@inject IWebHostEnvironment Environment
@inject IStorageInterface azureBlobStorage



<h3>FileUploadTableTemplate</h3>

<h1>Multiple files</h1>

<p>A multi-file picker that displays information about selection and shows progress as each one is loaded.</p>
<div>
    <label for="uploadFiles">Select File(s)</label>
    <InputFile id="uploadFiles" multiple OnChange="LoadFiles" />

    <label for="uploadFolder">Select Folder</label>
    <InputFile id="uploadFolder" multiple webkitdirectory OnChange="LoadFiles" />


    <button @onclick="() => UploadFiles()" disabled="@isLoading">

        <span>Upload Files</span>

    </button>

    @if (!isLoading)
    {
        <span>@uploadPercent</span>
    }
</div>



@if (loadedFiles != null)
{
    foreach (IBrowserFile file in loadedFiles)
    {
        <div class="file-row">
            <!-- File info -->
            <div>
                <h2>@file.Name</h2>
                Size: <strong>@file.Size bytes</strong>;
                Last modified: <strong>@file.LastModified</strong>;
                Type: <strong>@file.ContentType</strong>
            </div>

        </div>
    }
}



@code {
    private List<IBrowserFile> loadedFiles = new();
    private bool isLoading = false;
    private string uploadPercent = "";
    private long combinedUploadSize = 0;
    private long totalUploadedBytes = 0;



    private void LoadFiles(InputFileChangeEventArgs e)
    {

        loadedFiles.Clear();

        foreach (var file in e.GetMultipleFiles())
        {
            try
            {
                loadedFiles.Add(file);
            }
            catch (Exception ex)
            {
                Logger.LogError("File: {Filename} Error: {Error}",
                    file.Name, ex.Message);
            }
        }
    }

    public async Task UploadFiles()
    {
        isLoading = true;
        combinedUploadSize = loadedFiles.Sum(x => x.Size);
        totalUploadedBytes = 0;



        foreach (IBrowserFile localFile in loadedFiles)
        {


            try
            {
               await azureBlobStorage.UploadMetaFile(localFile);
            }
            catch (Exception ex)
            {
                Logger.LogError("File: {Filename} Error: {Error}",
                        localFile.Name, ex.Message);
            }
        }
        loadedFiles.Clear();
        isLoading = false;
    }
    


}
