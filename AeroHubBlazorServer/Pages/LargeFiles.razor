@page "/largefiles"

<h3>Upload photo</h3>
@if (ImageUrl != "")
{
    <img src="@ImageUrl" />
    <br />
    <br />
}
<div class="dropArea @dropClass">
    Drag and drop photo, or click to select a local file.
    <InputFile disabled="@Uploading"
               OnChange="OnInputFileChange"
               @ondragenter="HandleDragEnter"
               @ondragleave="HandleDragLeave" />
</div>
<br />

<h3>Upload large file in chunks</h3>

<div class="dropArea @dropClass">
    Drag and drop a very large file here, or click to select.
    <InputFile disabled="@UploadingLargeFile"
               OnChange="OnLargeFileInputFileChange"
               @ondragenter="HandleDragEnter"
               @ondragleave="HandleDragLeave" />
</div>

<div>@LargeUploadMessage</div>

@if (UploadingLargeFile)
{
    <progress style="height:50px;width:100%;" value="@UploadedBytes" max="@TotalBytes"></progress>
}
<br />
<h3>Files</h3>
<ul>
    @foreach (var url in FileUrls)
    {
        <li><a href="@url">@url</a><br /></li>
    }
</ul>

@code
{

    string ImageUrl = "";
    bool Uploading = false;

    bool UploadingLargeFile = false;
    string LargeUploadMessage = "";
    long UploadedBytes;
    long TotalBytes;
    List<string> FileUrls = new List<string>();

    // support for drag/drop
    string dropClass = string.Empty;
    void HandleDragEnter()
    {
        dropClass = "dropAreaDrug";
    }
    void HandleDragLeave()
    {
        dropClass = string.Empty;
    }

    /// <summary>
    /// Occurs when a large file is selected or dropped
    /// </summary>
    /// <param name="args"></param>
    /// <returns></returns>
    async Task OnLargeFileInputFileChange(InputFileChangeEventArgs args)
    {
        UploadedBytes = 0;

        // Disable the file input field
        UploadingLargeFile = true;
        await InvokeAsync(StateHasChanged);

        // calculate the chunks we have to send
        TotalBytes = args.File.Size;
        long percent = 0;
        long chunkSize = 400000; // fairly arbitrary
        long numChunks = TotalBytes / chunkSize;
        long remainder = TotalBytes % chunkSize;

        // get new filename with a bit of entropy
        string justFileName = Path.GetFileNameWithoutExtension(args.File.Name);
        string extension = Path.GetExtension(args.File.Name);
        string newFileNameWithoutPath = $"{justFileName}-{DateTime.Now.Ticks.ToString()}{extension}";
        string filename = $"{Environment.CurrentDirectory}\\files\\{newFileNameWithoutPath}";

        // Delete the file if it already exists in our \Files folder
        if (File.Exists(filename))
        {
            File.Delete(filename);
        }

        // Open the input and output file streams
        using (var inStream = args.File.OpenReadStream(long.MaxValue))
        {
            using (var outStream = File.OpenWrite(filename))
            {
                // Read and Write

                for (int i = 0; i < numChunks; i++)
                {
                    // Read the next chunk
                    var buffer = new byte[chunkSize];
                    await inStream.ReadAsync(buffer, 0, buffer.Length);
                    // Write it
                    await outStream.WriteAsync(buffer, 0, buffer.Length);
                    // Update our progress data and UI
                    UploadedBytes += chunkSize;
                    percent = UploadedBytes * 100 / TotalBytes;
                    // Report progress with a string
                    LargeUploadMessage = $"Uploading {args.File.Name} {percent}%";
                    await InvokeAsync(StateHasChanged);
                }

                if (remainder > 0)
                {
                    // Same stuff as above, just with the leftover chunk data
                    var buffer = new byte[remainder];
                    await inStream.ReadAsync(buffer, 0, buffer.Length);
                    await outStream.WriteAsync(buffer, 0, buffer.Length);
                    UploadedBytes += remainder;
                    percent = UploadedBytes * 100 / TotalBytes;
                    LargeUploadMessage = $"Uploading {args.File.Name} {percent}%";
                    await InvokeAsync(StateHasChanged);
                }
            }
        }

        LargeUploadMessage = "Upload Complete.";
        await ListFiles();

        UploadingLargeFile = false;
    }

    async Task OnInputFileChange(InputFileChangeEventArgs args)
    {
        dropClass = string.Empty;

        try
        {
            // disable the upload pane
            Uploading = true;
            await InvokeAsync(StateHasChanged);

            // Resize to no more than 400x400
            var format = "image/png";
            var resizedImageFile = await args.File.RequestImageFileAsync(format, 400, 400);

            // read resized png data into a buffer
            var buffer = new byte[resizedImageFile.Size];
            await resizedImageFile.OpenReadStream().ReadAsync(buffer);

            // get new filename with a bit of entropy
            string justFileName = Path.GetFileNameWithoutExtension(args.File.Name);
            string newFileNameWithoutPath = $"{justFileName}-{DateTime.Now.Ticks.ToString()}.png";
            string filename = $"{Environment.CurrentDirectory}\\files\\{newFileNameWithoutPath}";

            // write the file
            File.WriteAllBytes(filename, buffer);

            ImageUrl = $"files/{newFileNameWithoutPath}";

            await ListFiles();

            Uploading = false;

        }
        catch (Exception ex)
        {
            Uploading = false;
            await InvokeAsync(StateHasChanged);
            System.Diagnostics.Debug.WriteLine(ex.Message);
            throw;
        }
    }

    async Task ListFiles()
    {
        FileUrls.Clear();
        var files = Directory.GetFiles(Environment.CurrentDirectory + "\\Files", "*.*");
        foreach (var filename in files)
        {
            var file = Path.GetFileName(filename);
            string url = $"files/{file}";
            FileUrls.Add(url);
        }
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnInitializedAsync()
    {
        await ListFiles();
    }

}