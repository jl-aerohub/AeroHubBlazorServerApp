@page "/"

<h3>Upload photo</h3>
@if (ImageUrl != "")
{
    <img src="@ImageUrl" />
    <br />
    <br />
}
<div class="dropArea @dropClass">
    Drag and drop photo, or click to select a local file.
    <InputFile disabled="@Uploading"
               OnChange="OnInputFileChange"
               @ondragenter="HandleDragEnter"
               @ondragleave="HandleDragLeave" />
</div>
<br />
<h3>Files</h3>
<ul>
    @foreach (var url in FileUrls)
    {
        <li><a href="@url">@url</a><br /></li>
    }
</ul>
@code
{

    string ImageUrl = "";
    bool Uploading = false;
    List<string> FileUrls = new List<string>();

    // support for drag/drop
    string dropClass = string.Empty;
    void HandleDragEnter()
    {
        dropClass = "dropAreaDrug";
    }
    void HandleDragLeave()
    {
        dropClass = string.Empty;
    }

    async Task OnInputFileChange(InputFileChangeEventArgs args)
    {
        dropClass = string.Empty;

        try
        {
            // disable the upload pane
            Uploading = true;
            await InvokeAsync(StateHasChanged);

            // Resize to no more than 400x400
            var format = "image/png";
            var resizedImageFile = await args.File.RequestImageFileAsync(format, 400, 400);

            // read resized png data into a buffer
            var buffer = new byte[resizedImageFile.Size];
            await resizedImageFile.OpenReadStream().ReadAsync(buffer);

            // get new filename with a bit of entropy
            string justFileName = Path.GetFileNameWithoutExtension(args.File.Name);
            string newFileNameWithoutPath = $"{justFileName}-{DateTime.Now.Ticks.ToString()}.png";
            string filename = $"{Environment.CurrentDirectory}\\files\\{newFileNameWithoutPath}";

            // write the file
            File.WriteAllBytes(filename, buffer);

            ImageUrl = $"files/{newFileNameWithoutPath}";

            await ListFiles();

            Uploading = false;

        }
        catch (Exception ex)
        {
            Uploading = false;
            await InvokeAsync(StateHasChanged);
            System.Diagnostics.Debug.WriteLine(ex.Message);
            throw;
        }
    }

    async Task ListFiles()
    {
        FileUrls.Clear();
        var files = Directory.GetFiles(Environment.CurrentDirectory + "\\Files", "*.*");
        foreach (var filename in files)
        {
            var file = Path.GetFileName(filename);
            string url = $"files/{file}";
            FileUrls.Add(url);
        }
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnInitializedAsync()
    {
        await ListFiles();
    }

}