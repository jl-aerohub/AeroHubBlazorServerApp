@page "/UploadQIF"

@using System.Diagnostics.CodeAnalysis
@using AeroHubBlazorServer.Controllers
@using AeroHubBlazorServer.Data
@using AeroHubBlazorServer.Interfaces
@using AeroHubBlazorServer.Models
@using AeroHubBlazorServer.Pages
@using Azure
@using Azure.Storage.Blobs
@inject ILogger<UploadMetaData> Logger
@inject IWebHostEnvironment Environment
@inject IStorageInterface azureBlobStorage
@inject MetaDatasController controller

<PageTitle>QIF Selection</PageTitle>

<h3>QIF File Selection</h3>

<div>
    @*InputFile is a standard input box provided by AspNetCore*@
    <InputFile OnChange="LoadFile" id="InputFile" multiple accept=".qif"></InputFile>
    <button @onclick="() => UploadFile()" disabled="@isLoading">

        <span>Upload Selected File</span>

    </button>

    @if (!isLoading)
    {
        <span>@uploadPercent</span>
    }
</div>
   
@code {
    private List<MetaData> metaFiles = new();
    private bool isLoading = false;
    private string uploadPercent = "";
    private long combinedUploadSize = 0;
    private long totalUploadedBytes = 0;

    private void LoadFile(InputFileChangeEventArgs e)
    {

        //loadedFiles.Clear();

        foreach (var file in e.GetMultipleFiles())
        {
            try
            {
                var metafile = new MetaData()
                    {
                        FileName = file.Name,
                        BrowserFile = file,
                    };

                metaFiles.Add(metafile);
            }
            catch (Exception ex)
            {
                Logger.LogError("File: {Filename} Error: {Error}",
                    file.Name, ex.Message);
            }
        }
    }

    public async Task UploadFile()
    {
        isLoading = true;

        foreach (MetaData metafile in metaFiles)
        {
            string? blobUri=null;
            if (metafile.BrowserFile != null)
            {
                try
                {
                    blobUri = await azureBlobStorage.UploadMetaFile(metafile.BrowserFile);
                }
                catch (IOException ex)
                {
                    Logger.LogError(ex, "There was an IOException.");
                }
                catch (RequestFailedException ex)
                {
                    Logger.LogError(ex, "There was a request issue.");
                }
            }
        }
        metaFiles.Clear();
        isLoading = false;

    }

}
